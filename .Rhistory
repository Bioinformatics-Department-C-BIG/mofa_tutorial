df<-X2_t
df<-as.data.frame(apply(df, 2, function(x) as.numeric(x)))
ind <- apply(df, 2, function(x) sum(x, na.rm = TRUE)==0)
df<-df[,!ind]
X2_t<-df
Y_raw$Subtype<-as.factor(Y_raw$Subtype)
ncomp=10
X=X1_t
pca.gene <- pca(X, ncomp = ncomp, center = TRUE, scale = TRUE)
plot(pca.gene)
plotIndiv(pca.gene, comp = c(1, 2), group = Y_raw$Subtype,
legend = TRUE, title = ' PCA comp 1 - 2')
ggsave(paste0(outdir, 'PCA_plot.png'))
plotVar(pca.gene)
## Apply sparse PCA to select the tip 5 variables contributing to each
## of the components
spca.result <- spca(X, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(5, 5, 5))
selectVar(spca.result, comp = 1)$value
plotVar(spca.result)
ggsave(paste0(outdir, 'sparse_PCA_plot.png'))
# first make the Y tpo be the clinical variable
Y= subset(Y_raw, select = -c(X, Subtype, Sample) )
# Then make Y to be the proeomics
Y= X2_t
ncomp=10
pca.protein <- pca(Y, ncomp = ncomp, center = TRUE, scale = TRUE)
plot(pca.protein)+ title('Proteomics PCA')
head(selectVar(pca.gene, comp=1)$value)
# equivalent of liver toxicity treatment to us is the subtype
plotIndiv(pca.gene, comp = c(1, 2), group = Y_raw$Subtype,
legend = TRUE, title = 'Gene Expression, PCA comp 1 - 2')
ggsave(paste0(outdir, 'Gene_PCA_plot.png'))
plotIndiv(pca.protein, comp = c(1, 2), group = Y_raw$Subtype,
legend = TRUE,title = 'Proteomics, PCA comp 1 - 2')
head(selectVar(pca.protein, comp=1)$value)
ggsave(paste0(outdir, 'Proteomics_PCA_plot.png'))
bladder.pls <- pls(X, Y, ncomp = ncomp, mode = "regression")
bladder.spls <- spls(X, Y, ncomp =10, keepX = c(10,10,10), keepY= c(10,10,10), mode = "regression")
head(selectVar(bladder.spls, comp=1)$value)
tune.pls <- perf(bladder.pls, validation = "Mfold", folds = 4, progressBar = FALSE, nrepeat = 10)
tune.spls <- perf(bladder.spls, validation = "Mfold", folds = 4, progressBar = FALSE, nrepeat = 10)
par(mfrow = c(1,3))
plotIndiv(bladder.spls, comp = 1:2, rep.space= 'Y-variate',
group = Y_raw$Subtype,
legend = TRUE, title = 'Bladder, sPLS comp 1 - 2, Y-space')
plotIndiv(bladder.spls, comp = 1:2, rep.space= 'X-variate',
group = Y_raw$Subtype,
legend = TRUE, title = 'Bladder, sPLS comp 1 - 2, X-space')
## COMBINED #
plotIndiv(bladder.spls, comp = 1:2, rep.space= 'XY-variate',
group = Y_raw$Smoking.history,
legend = TRUE, title = 'Bladder, sPLS comp 1 - 2, XY-space')
#### Variable plots
plotVar(bladder.spls, comp =1:2)
selectVar(bladder.spls, comp=1)$X$value
bladder.spls
X[,c('GREM1', 'LINC00261', 'STAU1')]
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
tune.pls <- perf(result, validation = 'loo', criterion = 'all', progressBar = FALSE)
x
# SPLS
ncomp = 10
result.spls <- spls(X, Y, ncomp = ncomp, keepX = c(rep(10, ncomp)), mode = 'regression')
tune.spls <- perf(result.spls, validation = 'Mfold', folds = 10,
criterion = 'all', progressBar = FALSE)
plotDiablo(sgccda.res, ncomp = 1)
bladder.pls <- pls(X, Y, ncomp = ncomp, mode = "regression")
bladder.spls <- spls(X, Y, ncomp =10, keepX = c(10,10,10), keepY= c(10,10,10), mode = "regression")
head(selectVar(bladder.spls, comp=1)$value)
tune.pls <- perf(bladder.pls, validation = "Mfold", folds = 4, progressBar = FALSE, nrepeat = 10)
tune.spls <- perf(bladder.spls, validation = "Mfold", folds = 4, progressBar = FALSE, nrepeat = 10)
par(mfrow = c(1,3))
plotIndiv(bladder.spls, comp = 1:2, rep.space= 'Y-variate',
group = Y_raw$Subtype,
legend = TRUE, title = 'Bladder, sPLS comp 1 - 2, Y-space')
plotIndiv(bladder.spls, comp = 1:2, rep.space= 'X-variate',
group = Y_raw$Subtype,
legend = TRUE, title = 'Bladder, sPLS comp 1 - 2, X-space')
## COMBINED #
plotIndiv(bladder.spls, comp = 1:2, rep.space= 'XY-variate',
group = Y_raw$Smoking.history,
legend = TRUE, title = 'Bladder, sPLS comp 1 - 2, XY-space')
#### Variable plots
plotVar(bladder.spls, comp =1:2)
#### Variable plots
plotVar(bladder.spls, comp =1:2)
#### Variable plots
plotVar(bladder.spls, comp =1:2)
#### Variable plots
plotVar(bladder.spls, comp =1:2)
selectVar(bladder.spls, comp=1)$X$value
selectVar(bladder.spls, comp=1)$Y$value
selectVar(bladder.spls, comp=1)$Y$value
selectVar(bladder.spls, comp=1)$X$value
cim(bladder.spls, comp = 1:3, xlab = "protein", ylab = "RNA",
margins = c(7, 7))
selectVar(bladder.spls, comp=1)$X$value
selectVar(bladder.spls, comp=2)$X$value
selectVar(bladder.spls, comp=2)$Y$value
colname<-'Data'
library('dplyr')
library('purrr')
level1<-c('Transcriptomics', 'Genomics','Epigenomics', 'Proteomics', 'Metabolomics', 'Lipidomics', 'Metagenomics', 'miRNAs')
# Process; if methylation or histone; add epigenomics!
preprocessing<-function(df,colname){
#' Split the column
#' Return the split variables to get the frequencies
splitted<-str_split(df[[colname]], ',|\r|\n') # split by space, comma, newline
splitted<-lapply(splitted,trimws)           # remove whitespace
splitted<-splitted[!is.na(splitted)]      # remove nas
return(splitted)
}
comb_frequencies_by_group<-get_combination_frequencies_by_group(stats, 'Data')
get_frequencies<-function(x){
#' Get the frequency of each occurrence
#'
#'
x<-unlist(x) # collapse accross studies
x<-x[x!='']
x<-table(tolower(unlist(x)))
x<-data.frame(x)
#return(omics_data_frequencies)
}
df<-new
Var1<-'objective'
group_objectives<-function(df, Var1){
#'Group objective code column
df[Var1]<-sapply(df[Var1],
function(x)
gsub('.*diagnosis.*|*prognosis*', 'Diagnosis/Prognosis', tolower(x)))
return(df)
}
#TODO: make a function to check if there is methylomics
group_omics<-function(df, Var1){
#'Group objective code column
df[Var1]<-sapply(df[Var1],
function(x)
gsub('*methyl*', 'Epigenomics', tolower(x)))
return(df)
}
library('readxl')
library('stringr')
library(ggplot2)
library(data.table)
stats<-read_excel('C:/Users/athienitie/Google Drive/PHD 2020/Literature/Data Integration/Copy of Multi-omics_not cancer_updated at home  - November 2, 6_24 Pm.xlsx' )
stats<-read_excel('H:/My Drive/PHD 2020/Literature/Data Integration/Multi-omics_not cancer_merge.xlsx' )
### Remove reviews, remove rejected articles
## GLOBAL FILTER
stats <- stats %>%
filter(Type!= 'Review')%>%
filter(is.na(`Rejection /Critic`))
stats$same_sample<-as.factor(tolower(stats$same_sample))
get_frequencies_by_group<-function(stats,colname){
df_by_group<- stats %>%
group_by(same_sample) %>%
group_map(~ preprocessing(.x, colname) %>%
get_frequencies()
)  %>%
map_df(I, .id='same_sample')
return(df_by_group)
}
stats$same_sample<-as.factor(tolower(stats$same_sample))
colname<-'Data'
#### Also filter by omics
frequencies_by_group<-get_frequencies_by_group(stats, colname)
freq_to_plot<-frequencies_by_group %>% filter(Var1 %in% tolower(level1))
library(grid)
plotByData(freq_to_plot)
ggplot(freq_to_plot, aes(x=reorder(Var1, -Freq, sum), y=Freq, fill=same_sample))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL)+
theme(axis.text.x = element_text(size=rel(1.3),angle = 25, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,2,1.5),"cm"))
ggsave(paste0('plots/SingleOmicsby', as.character(colname), '.png'), width = 8, height = 5)
colname<-'Data'
omics_data<-df_by_group[[1]]
get_combs<- function(x){
x<-unlist(x)
x<-x[tolower(x) %in% tolower(level1)]
if (length(x)>1){
x<-x[order(x)]
combn(x,2, FUN=paste, collapse=' - ')}
}
preprocessing_combinations<-function(x){
#' Create combinations of omics datasets
x<-x[x!='']
#
x<-x[!is.na(x)]
#' Create pairs of omics
#' #
#'
combinations<-lapply(x,get_combs)
return(combinations)
}
total<-NROW(stats[!is.na(stats$Data),]$PMID)
df_by_group <- stats %>%
group_by(same_sample) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations %>%
get_frequencies()
)  %>%
map_df(I, .id='same_sample')
freq_cutoff<-4
df_by_group<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= freq_cutoff)
plotByData(df_by_group)
plotByData<-function(df_by_group){
ggplot(df_by_group, aes(x=reorder(Var1, -Freq, sum), y=Freq, fill=same_sample))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL, title=paste0('Combinations with > ',freq_cutoff, ' occurences'))+
theme(axis.text.x = element_text(size=rel(1.3),angle = 35, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,1.7,2.5),"cm"))
ggsave(paste0('plots/byCombinations', as.character(colname), '.png'), width = 8, height=6)
}
library(tidyverse)
library(tidyverse)
########
###
#' Expand the objective-code
#' And get frequencies by objective group
#'
colnames(stats)[which(colnames(stats)=='Objective-Code')]<-'objective'
colnames(stats)[which(colnames(stats)=='Integration method-Category')]<-'method'
new<-stats %>%
mutate(method=strsplit(method, ',|\r|\n' ))%>%
unnest(method)
#x_group<-'objective'
x_group<-'method'
colname='Data'
new[x_group] <-apply(new[x_group], 1, function(x) trimws(tolower(x)))
keys<-pull(new %>%
group_by_at(x_group) %>%
group_keys())
#' TODO: check the rownames given by get frequencies..
#' TODO: use dplyr instead
#'
#'
df_by_group<-new %>%
group_by_at(x_group)
df_by_group<-new %>%
group_by_at(x_group) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations() %>%
get_frequencies()
)  %>%
map_df(I, .id=x_group)
# Attach the key names back to the dataframe
df_by_group<-as.data.frame(as.matrix(df_by_group))
df_by_group[,x_group]<-as.numeric(df_by_group[,x_group])
key_names<-c(keys[df_by_group[,x_group]])
df_by_group<-cbind(key_names,df_by_group)
df_by_group$Freq<-as.numeric(df_by_group$Freq)
df_to_plot<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= 5) %>%
group_by_at(x_group)  %>%
filter( sum(Freq) >= 2)
#df_to_plot<-df_by_group
df_to_plot<-df_to_plot[!is.na(df_to_plot$key_names),]
show_p<-plotbyObjective(df_to_plot )
show_p
plotByData(df_by_group)
colname<-'Data'
omics_data<-df_by_group[[1]]
get_combs<- function(x){
x<-unlist(x)
x<-x[tolower(x) %in% tolower(level1)]
if (length(x)>1){
x<-x[order(x)]
combn(x,2, FUN=paste, collapse=' - ')}
}
preprocessing_combinations<-function(x){
#' Create combinations of omics datasets
x<-x[x!='']
#
x<-x[!is.na(x)]
#' Create pairs of omics
#' #
#'
combinations<-lapply(x,get_combs)
return(combinations)
}
total<-NROW(stats[!is.na(stats$Data),]$PMID)
df_by_group <- stats %>%
group_by(same_sample) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations %>%
get_frequencies()
)  %>%
map_df(I, .id='same_sample')
freq_cutoff<-4
df_by_group<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= freq_cutoff)
plotByData(df_by_group)
plotByData<-function(df_by_group){
ggplot(df_by_group, aes(x=reorder(Var1, -Freq, sum), y=Freq, fill=same_sample))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL, title=paste0('Combinations with > ',freq_cutoff, ' occurences'))+
theme(axis.text.x = element_text(size=rel(1.3),angle = 35, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,1.7,2.5),"cm"))
ggsave(paste0('plots/byCombinations', as.character(colname), '.png'), width = 8, height=6)
}
library(tidyverse)
########
###
#' Expand the objective-code
#' And get frequencies by objective group
#'
colnames(stats)[which(colnames(stats)=='Objective-Code')]<-'objective'
colnames(stats)[which(colnames(stats)=='Integration method-Category')]<-'method'
new<-stats %>%
mutate(method=strsplit(method, ',|\r|\n' ))%>%
unnest(method)
#x_group<-'objective'
x_group<-'method'
colname='Data'
new[x_group] <-apply(new[x_group], 1, function(x) trimws(tolower(x)))
keys<-pull(new %>%
group_by_at(x_group) %>%
group_keys())
#' TODO: check the rownames given by get frequencies..
#' TODO: use dplyr instead
#'
#'
df_by_group<-new %>%
group_by_at(x_group)
df_by_group<-new %>%
group_by_at(x_group) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations() %>%
get_frequencies()
)  %>%
map_df(I, .id=x_group)
# Attach the key names back to the dataframe
df_by_group<-as.data.frame(as.matrix(df_by_group))
colname<-'Data'
library('dplyr')
library('purrr')
level1<-c('Transcriptomics', 'Genomics','Epigenomics', 'Proteomics', 'Metabolomics', 'Lipidomics', 'Metagenomics', 'miRNAs')
# Process; if methylation or histone; add epigenomics!
preprocessing<-function(df,colname){
#' Split the column
#' Return the split variables to get the frequencies
splitted<-str_split(df[[colname]], ',|\r|\n') # split by space, comma, newline
splitted<-lapply(splitted,trimws)           # remove whitespace
splitted<-splitted[!is.na(splitted)]      # remove nas
return(splitted)
}
comb_frequencies_by_group<-get_combination_frequencies_by_group(stats, 'Data')
get_frequencies<-function(x){
#' Get the frequency of each occurrence
#'
#'
x<-unlist(x) # collapse accross studies
x<-x[x!='']
x<-table(tolower(unlist(x)))
x<-data.frame(x)
#return(omics_data_frequencies)
}
df<-new
Var1<-'objective'
group_objectives<-function(df, Var1){
#'Group objective code column
df[Var1]<-sapply(df[Var1],
function(x)
gsub('.*diagnosis.*|*prognosis*', 'Diagnosis/Prognosis', tolower(x)))
return(df)
}
#TODO: make a function to check if there is methylomics
group_omics<-function(df, Var1){
#'Group objective code column
df[Var1]<-sapply(df[Var1],
function(x)
gsub('*methyl*', 'Epigenomics', tolower(x)))
return(df)
}
library('readxl')
library('stringr')
library(ggplot2)
library(data.table)
stats<-read_excel('C:/Users/athienitie/Google Drive/PHD 2020/Literature/Data Integration/Copy of Multi-omics_not cancer_updated at home  - November 2, 6_24 Pm.xlsx' )
stats<-read_excel('H:/My Drive/PHD 2020/Literature/Data Integration/Multi-omics_not cancer_merge.xlsx' )
### Remove reviews, remove rejected articles
## GLOBAL FILTER
stats <- stats %>%
filter(Type!= 'Review')%>%
filter(is.na(`Rejection /Critic`))
stats$same_sample<-as.factor(tolower(stats$same_sample))
get_frequencies_by_group<-function(stats,colname){
df_by_group<- stats %>%
group_by(same_sample) %>%
group_map(~ preprocessing(.x, colname) %>%
get_frequencies()
)  %>%
map_df(I, .id='same_sample')
return(df_by_group)
}
stats$same_sample<-as.factor(tolower(stats$same_sample))
colname<-'Data'
#### Also filter by omics
frequencies_by_group<-get_frequencies_by_group(stats, colname)
freq_to_plot<-frequencies_by_group %>% filter(Var1 %in% tolower(level1))
library(grid)
plotByData(freq_to_plot)
ggplot(freq_to_plot, aes(x=reorder(Var1, -Freq, sum), y=Freq, fill=same_sample))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL)+
theme(axis.text.x = element_text(size=rel(1.3),angle = 25, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,2,1.5),"cm"))
ggsave(paste0('plots/SingleOmicsby', as.character(colname), '.png'), width = 8, height = 5)
colname<-'Data'
omics_data<-df_by_group[[1]]
get_combs<- function(x){
x<-unlist(x)
x<-x[tolower(x) %in% tolower(level1)]
if (length(x)>1){
x<-x[order(x)]
combn(x,2, FUN=paste, collapse=' - ')}
}
preprocessing_combinations<-function(x){
#' Create combinations of omics datasets
x<-x[x!='']
#
x<-x[!is.na(x)]
#' Create pairs of omics
#' #
#'
combinations<-lapply(x,get_combs)
return(combinations)
}
total<-NROW(stats[!is.na(stats$Data),]$PMID)
df_by_group <- stats %>%
group_by(same_sample) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations %>%
get_frequencies()
)  %>%
map_df(I, .id='same_sample')
freq_cutoff<-4
df_by_group<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= freq_cutoff)
plotByData(df_by_group)
plotByData<-function(df_by_group){
ggplot(df_by_group, aes(x=reorder(Var1, -Freq, sum), y=Freq, fill=same_sample))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL, title=paste0('Combinations with > ',freq_cutoff, ' occurences'))+
theme(axis.text.x = element_text(size=rel(1.3),angle = 35, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,1.7,2.5),"cm"))
ggsave(paste0('plots/byCombinations', as.character(colname), '.png'), width = 8, height=6)
}
library(tidyverse)
########
###
#' Expand the objective-code
#' And get frequencies by objective group
#'
colnames(stats)[which(colnames(stats)=='Objective-Code')]<-'objective'
colnames(stats)[which(colnames(stats)=='Integration method-Category')]<-'method'
new<-stats %>%
mutate(method=strsplit(method, ',|\r|\n' ))%>%
unnest(method)
#x_group<-'objective'
x_group<-'method'
colname='Data'
new[x_group] <-apply(new[x_group], 1, function(x) trimws(tolower(x)))
keys<-pull(new %>%
group_by_at(x_group) %>%
group_keys())
#' TODO: check the rownames given by get frequencies..
#' TODO: use dplyr instead
#'
#'
df_by_group<-new %>%
group_by_at(x_group)
df_by_group<-new %>%
group_by_at(x_group) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations() %>%
get_frequencies()
)  %>%
map_df(I, .id=x_group)
# Attach the key names back to the dataframe
df_by_group<-as.data.frame(as.matrix(df_by_group))
df_by_group[,x_group]<-as.numeric(df_by_group[,x_group])
key_names<-c(keys[df_by_group[,x_group]])
df_by_group<-cbind(key_names,df_by_group)
df_by_group$Freq<-as.numeric(df_by_group$Freq)
df_to_plot<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= 5) %>%
group_by_at(x_group)  %>%
filter( sum(Freq) >= 2)
#df_to_plot<-df_by_group
df_to_plot<-df_to_plot[!is.na(df_to_plot$key_names),]
show_p<-plotbyObjective(df_to_plot )
show_p
plotbyObjective<-function(df){
g<-ggplot(df, aes(x=reorder(key_names, -Freq, sum), y=Freq, fill=Var1))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL)+
theme(axis.text.x = element_text(size=rel(1.3),angle = 25, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,2,1.7),"cm"))
ggsave(paste0('plots/byGroup', as.character(x_group), '.png'), width = 8, height=6)
return(g)
}
#comb_freq<- comb_frequencies_by_group %>% filter(same_sample ==3)
edge_list<-data.frame(do.call(rbind, str_split(comb_freq$Var1, ' - ')))
