summary(var_weights_miRNA)
miRNA_data<-get_data(MOFAobject)$miRNA[[1]]
RNA_data<-get_data(MOFAobject)$RNA[[1]]
CONF_train<-MOFAobject@samples_metadata[c('AGE_AT_VISIT', 'SEX')]
CONF_train_R<-t(CONF_train)
### TEST
test_data_miRNA<-assays(mofa_multi_complete_test)$miRNA
test_data_RNA<-assays(mofa_multi_complete_test)$RNA
y_actual<-colData(mofa_multi_complete_test)[,'CONCOHORT']
CONF<-as.data.frame(colData(mofa_multi_complete_test)@listData[c('AGE_AT_VISIT', 'SEX')])
CONF_R<-t(CONF)
#### ADD ALSO SEX AND AGE
use_mofa=TRUE
if (use_mofa){
RNA_data
RNA_data_filt<-RNA_data[rownames(RNA_data) %in% unique(all_feats_RNA),]
miRNA_data_filt<-miRNA_data[rownames(miRNA_data) %in% unique(all_feats_miRNA),]
test_data_miRNA_filt<-test_data_miRNA[ rownames(test_data_miRNA) %in% all_feats_miRNA,]
test_data_RNA_filt<-test_data_RNA[ rownames(test_data_RNA) %in% all_feats_RNA,]
dim(RNA_data)
dim(RNA_data_filt);  dim(test_data_RNA_filt);
dim(miRNA_data_filt)
data_filt<-rbind(RNA_data_filt, miRNA_data_filt)
test_data_filt<-rbind(test_data_RNA_filt, test_data_miRNA_filt)
## append confounding factors
test_data_filt_conf<-rbind(test_data_filt, CONF_R)
data_filt_conf<-rbind(data_filt, CONF_train_R)
dim(data_filt)
}else{
data_filt<-RNA_data_filt
}
select_features<-function(select_feats){
RNA_data_filt<-RNA_data[SIG_GENES,]
}
all_preds<-function(data_filt){
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
colnames(df)<-gsub('-', '.',colnames(df) )
rownames(test_data_filt)<-gsub('-','.', rownames(test_data_filt))
df_test <- as.data.frame(t(test_data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
# as.factor(MOFAobject@samples_metadata[,'CONCOHORT_DEFINITION'])
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
#}
# Do predictions
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
#### ON TEST SET
# Assess performance
## diagnostic
# install.packages('caret')
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
#predictions<-as.data.frame(cbind(c(actual), c(predicted)))
#colnames(predictions)=c('observed', 'predicted')
#conf<-confusionMatrix(confusion_mat)
print(confusion_mat)
round(importance(model.y), 2)
return(confusion_mat)
}
all_preds(data_filt_conf)
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
colnames(df)<-gsub('-', '.',colnames(df) )
rownames(test_data_filt)<-gsub('-','.', rownames(test_data_filt))
df_test <- as.data.frame(t(test_data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
print(confusion_mat)
### then do predictions
T=0.3;
split=TRUE
outdir=paste0(outdir, 'split_', split)
outdir = paste0(outdir_orig,out_params, 'split_', split , '/');outdir
library(ggplot2)
#BiocManager::install('EnsDb.Hsapiens.v79')
library(EnsDb.Hsapiens.v79)
graphics.off()
MOFAobject@features_metadata
features_names(MOFAobject)
print(outdir)
jpeg(paste0(outdir, 'factor_cor','.jpeg'))
plot_factor_cor(MOFAobject)
dev.off()
group=1
### Change mofa names to gene symbols
### create a new object with rna names
MOFAobject_gs<-MOFAobject
ens_ids_full<- features_names(MOFAobject)$RNA
ens_ids<-   ens_ids<-gsub('\\..*', '', ens_ids_full)
library(ensembldb)
#BiocManager::install('EnsDb.Hsapiens.v79')
library(EnsDb.Hsapiens.v79)
## Making a "short cut"
geneIDs1 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= ens_ids, keytype = "GENEID", columns = c("SYMBOL","GENEID"))
length(ens_ids)
geneIDs1
length(geneIDs1$SYMBOL)
new_ids<-geneIDs1[match(ens_ids,geneIDs1$GENEID ),]
## sOME SYMBOLS DOI NOT EXIST SO we only replace the ones that do
not_na_ind<-!is.na(new_ids$SYMBOL)
ens_ids[not_na_ind]<-new_ids$SYMBOL[not_na_ind]
features_names(MOFAobject_gs)$RNA<-ens_ids
ens_ids
MOFAobject_gs@samples_metadata$COHORT_DEFINITION
vars_by_factor_all<-calculate_variance_explained(MOFAobject)
vars_by_factor<-vars_by_factor_all$r2_per_factor[[group]]
write.table(format(vars_by_factor,digits = 2)
,paste0(outdir,'variance_explained.txt'), quote=FALSE)
vars_by_factor>0.1
plot_variance_explained(MOFAobject, max_r2=20)
ggsave(paste0(outdir, 'variance_explained','.png'), width = 4, height=4, dpi=100)
MOFAobject@samples_metadata$SEX
colnames(MOFAobject@samples_metadata)[20:35]
stats<-apply(MOFAobject@samples_metadata, 2,table )
sapply(stats,var)>0
non_na_vars<-which(!is.na(sapply(stats,mean)) & sapply(stats,var)>0 )
NROW(non_na_vars)
## plot only factors that correlate?
cors<-correlate_factors_with_covariates(MOFAobject,
covariates = names(non_na_vars),
plot = "log_pval",
return_data = TRUE
)
ids_to_plot<-which(apply(cors, 2, sum)>0)
ids_to_plot<-which(apply(cors, 2, sum)>0)
jpeg(paste0(outdir, 'factors_covariates_all','.jpeg'), width = 2000, height=700, res=150)
correlate_factors_with_covariates(MOFAobject,
covariates = names(non_na_vars),
plot = "log_pval"
)
dev.off()
graphics.off()
keep<-!(names(ids_to_plot ) %in% c('REC_ID_moca', 'REC_ID_st'))
ids_to_plot<-ids_to_plot[keep]
jpeg(paste0(outdir, 'factors_covariates_only_nonzero','.jpeg'), width = length(ids_to_plot)*22, height=1000, res=150)
correlate_factors_with_covariates(MOFAobject,
covariates = names(non_na_vars)[ids_to_plot],
plot = "log_pval"
)
dev.off()
covariate_corelations<-correlate_factors_with_covariates(MOFAobject,
covariates = colnames(MOFAobject@samples_metadata)[c(6:12,45:70, 90:124)],
plot = "log_pval",
return_data = TRUE
)
covariate_corelations<-correlate_factors_with_covariates(MOFAobject,
covariates = colnames(MOFAobject@samples_metadata)[c(6:12,45:70, 90:124)],
plot = "log_pval",
return_data = TRUE
)
write.csv(covariate_corelations, paste0(outdir, '/covariate_corelations.csv'))
view='proteomics'; factor=6
vps=length(MOFAobject@dimensions$D)
fps= as.numeric(MOFAobject@dimensions$K)
fps
views<-names(MOFAobject@dimensions$D)
views
### Actually get only factors with higher variance in RNA
dir.create(paste0(outdir, 'top_weights/'))
T=0.3
for (i in seq(1,vps)){
view=views[i]
cluego1<-paste0(outdir, 'top_weights/top_weights_vals_by_view_CLUEGO_', view, '_T_', T, '.txt')
all_weights1<-MOFA2::get_weights(MOFAobject_gs,
views = view,
as.data.frame =TRUE)
# threshold each?
all_weights_filt<-all_weights1[abs(all_weights1$value)>T,]
ens_ids<-gsub('\\..*', '', all_weights_filt$feature)
write.csv(ens_ids,cluego1,
row.names = FALSE, quote=FALSE)
### write gene symbols here
all_weights1<-MOFA2::get_weights(MOFAobject_gs,
views = view,
as.data.frame =TRUE)
all_weights_filt<-all_weights1[abs(all_weights1$value)>T,]
write.table(all_weights_filt,paste0(outdir, 'top_weights/top_weights_vals_by_view_', view, '_T_', T, '.txt'), sep = '\t')
# threshold each?
}
outdir
high_vars_by_factor<-vars_by_factor>0.1
for (i in seq(1,vps)){
for (ii in seq(1,fps)){
#### print only the views with high variance in factor
view=views[i]
factor=ii
print(view, factor)
all_weights<-MOFA2::get_weights(MOFAobject_gs,views = view, factors=factor,
as.data.frame =TRUE)
### get the top highly weighted variables - absolute value
top<-all_weights[order(abs(all_weights$value), decreasing = TRUE),]
if (high_vars_by_factor[factor, view]){
write.table(top,paste0(outdir, 'top_weights/top_weights_vals',factor,'_', view,'.txt'), sep = '\t')
}
}
}
plot_variance_explained(MOFAobject, plot_total = T)[[2]]
ggsave(paste0(outdir, 'variance_explained_total','.png'), width = 4, height=4, dpi=100)
### wHICH VARIABLES correlate with which factors
pos_cors<-cors>0  # which have more than two factors positive
n_factors_pos=1
positive_cors<-cors[,colSums(pos_cors)>n_factors_pos]
# choose factors based on important/associate
ws_all_miRNA<-get_weights(MOFAobject, factors=choose_factors)$miRNA
choose_factors<-c(2,3)
# choose factors based on important/associate
ws_all_miRNA<-get_weights(MOFAobject, factors=choose_factors)$miRNA
ws_all_RNA<-get_weights(MOFAobject, factors=choose_factors)$RNA
QUANTILE_THRESH<-0.4
T1<-quantile(ws_all_RNA,QUANTILE_THRESH )
T2<-quantile(ws_all_miRNA, QUANTILE_THRESH)
hist(ws_all_miRNA)
### weight all
### probably not a good idea to scale there might be high variability but NOT associated with disease control
# maybe better to scale by disease control association?
#var_weights_miRNA<-ws_all_miRNA * vars_by_factor[choose_factors,'miRNA' ] /100
#var_weights_RNA<-ws_all_RNA * vars_by_factor[choose_factors,'RNA' ] / 100
head(var_weights_RNA)
all_feats_RNA<-rownames(ws_all_RNA)[rowSums((abs(ws_all_RNA)>abs(T1)))>0L]
all_feats_miRNA<-rownames(ws_all_miRNA)[rowSums((abs(ws_all_miRNA)>abs(T2)))>0L]
length(all_feats_RNA)
length(all_feats_miRNA)
summary(var_weights_miRNA)
miRNA_data<-get_data(MOFAobject)$miRNA[[1]]
RNA_data<-get_data(MOFAobject)$RNA[[1]]
CONF_train<-MOFAobject@samples_metadata[c('AGE_AT_VISIT', 'SEX')]
CONF_train_R<-t(CONF_train)
### TEST
test_data_miRNA<-assays(mofa_multi_complete_test)$miRNA
test_data_RNA<-assays(mofa_multi_complete_test)$RNA
y_actual<-colData(mofa_multi_complete_test)[,'CONCOHORT']
CONF<-as.data.frame(colData(mofa_multi_complete_test)@listData[c('AGE_AT_VISIT', 'SEX')])
CONF_R<-t(CONF)
#### ADD ALSO SEX AND AGE
use_mofa=TRUE
if (use_mofa){
RNA_data
RNA_data_filt<-RNA_data[rownames(RNA_data) %in% unique(all_feats_RNA),]
miRNA_data_filt<-miRNA_data[rownames(miRNA_data) %in% unique(all_feats_miRNA),]
test_data_miRNA_filt<-test_data_miRNA[ rownames(test_data_miRNA) %in% all_feats_miRNA,]
test_data_RNA_filt<-test_data_RNA[ rownames(test_data_RNA) %in% all_feats_RNA,]
dim(RNA_data)
dim(RNA_data_filt);  dim(test_data_RNA_filt);
dim(miRNA_data_filt)
data_filt<-rbind(RNA_data_filt, miRNA_data_filt)
test_data_filt<-rbind(test_data_RNA_filt, test_data_miRNA_filt)
## append confounding factors
test_data_filt_conf<-rbind(test_data_filt, CONF_R)
data_filt_conf<-rbind(data_filt, CONF_train_R)
dim(data_filt)
}else{
data_filt<-RNA_data_filt
}
select_features<-function(select_feats){
RNA_data_filt<-RNA_data[SIG_GENES,]
}
all_preds<-function(data_filt){
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
colnames(df)<-gsub('-', '.',colnames(df) )
rownames(test_data_filt)<-gsub('-','.', rownames(test_data_filt))
df_test <- as.data.frame(t(test_data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
# as.factor(MOFAobject@samples_metadata[,'CONCOHORT_DEFINITION'])
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
#}
# Do predictions
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
#### ON TEST SET
# Assess performance
## diagnostic
# install.packages('caret')
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
#predictions<-as.data.frame(cbind(c(actual), c(predicted)))
#colnames(predictions)=c('observed', 'predicted')
#conf<-confusionMatrix(confusion_mat)
print(confusion_mat)
round(importance(model.y), 2)
return(confusion_mat)
}
all_preds(data_filt_conf)
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
colnames(df)<-gsub('-', '.',colnames(df) )
rownames(test_data_filt)<-gsub('-','.', rownames(test_data_filt))
df_test <- as.data.frame(t(test_data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
print(confusion_mat)
round(importance(model.y), 2)
print(confusion_mat)
QUANTILE_THRESH<-0.5
T1<-quantile(ws_all_RNA,QUANTILE_THRESH )
T2<-quantile(ws_all_miRNA, QUANTILE_THRESH)
hist(ws_all_miRNA)
### weight all
### probably not a good idea to scale there might be high variability but NOT associated with disease control
# maybe better to scale by disease control association?
#var_weights_miRNA<-ws_all_miRNA * vars_by_factor[choose_factors,'miRNA' ] /100
#var_weights_RNA<-ws_all_RNA * vars_by_factor[choose_factors,'RNA' ] / 100
head(var_weights_RNA)
all_feats_RNA<-rownames(ws_all_RNA)[rowSums((abs(ws_all_RNA)>abs(T1)))>0L]
all_feats_miRNA<-rownames(ws_all_miRNA)[rowSums((abs(ws_all_miRNA)>abs(T2)))>0L]
length(all_feats_RNA)
length(all_feats_miRNA)
summary(var_weights_miRNA)
miRNA_data<-get_data(MOFAobject)$miRNA[[1]]
RNA_data<-get_data(MOFAobject)$RNA[[1]]
CONF_train<-MOFAobject@samples_metadata[c('AGE_AT_VISIT', 'SEX')]
CONF_train_R<-t(CONF_train)
### TEST
test_data_miRNA<-assays(mofa_multi_complete_test)$miRNA
test_data_RNA<-assays(mofa_multi_complete_test)$RNA
y_actual<-colData(mofa_multi_complete_test)[,'CONCOHORT']
CONF<-as.data.frame(colData(mofa_multi_complete_test)@listData[c('AGE_AT_VISIT', 'SEX')])
CONF_R<-t(CONF)
#### ADD ALSO SEX AND AGE
use_mofa=TRUE
if (use_mofa){
RNA_data
RNA_data_filt<-RNA_data[rownames(RNA_data) %in% unique(all_feats_RNA),]
miRNA_data_filt<-miRNA_data[rownames(miRNA_data) %in% unique(all_feats_miRNA),]
test_data_miRNA_filt<-test_data_miRNA[ rownames(test_data_miRNA) %in% all_feats_miRNA,]
test_data_RNA_filt<-test_data_RNA[ rownames(test_data_RNA) %in% all_feats_RNA,]
dim(RNA_data)
dim(RNA_data_filt);  dim(test_data_RNA_filt);
dim(miRNA_data_filt)
data_filt<-rbind(RNA_data_filt, miRNA_data_filt)
test_data_filt<-rbind(test_data_RNA_filt, test_data_miRNA_filt)
## append confounding factors
test_data_filt_conf<-rbind(test_data_filt, CONF_R)
data_filt_conf<-rbind(data_filt, CONF_train_R)
dim(data_filt)
}else{
data_filt<-RNA_data_filt
}
select_features<-function(select_feats){
RNA_data_filt<-RNA_data[SIG_GENES,]
}
all_preds<-function(data_filt){
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
colnames(df)<-gsub('-', '.',colnames(df) )
rownames(test_data_filt)<-gsub('-','.', rownames(test_data_filt))
df_test <- as.data.frame(t(test_data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
# as.factor(MOFAobject@samples_metadata[,'CONCOHORT_DEFINITION'])
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
#}
# Do predictions
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
#### ON TEST SET
# Assess performance
## diagnostic
# install.packages('caret')
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
#predictions<-as.data.frame(cbind(c(actual), c(predicted)))
#colnames(predictions)=c('observed', 'predicted')
#conf<-confusionMatrix(confusion_mat)
print(confusion_mat)
round(importance(model.y), 2)
return(confusion_mat)
}
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
colnames(df)<-gsub('-', '.',colnames(df) )
rownames(test_data_filt)<-gsub('-','.', rownames(test_data_filt))
df_test <- as.data.frame(t(test_data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
print(confusion_mat)
round(importance(model.y), 2)
print(confusion_mat)
#remove.packages('rlang')
#install.packages('vctrs')
library('vctrs')
library(caret)
update.packages('vctrs')
sessionInfo()
ntree
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=20)
df$y <- NULL # important
###
head(test_data_filt)
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=20)
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
colnames(df)<-gsub('-', '.',colnames(df) )
rownames(test_data_filt)<-gsub('-','.', rownames(test_data_filt))
df_test <- as.data.frame(t(test_data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=20)
df$y <- NULL # important
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
print(confusion_mat)
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=40)
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=40)
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=40)
df$y <- NULL # important
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
print(confusion_mat)
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=50)
df$y <- NULL # important
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
print(confusion_mat)
round(importance(model.y), 2)
print(confusion_mat)
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=35)
###
head(test_data_filt)
y.pred <- stats::predict(model.y, df_test)
predicted <- y.pred
actual <-as.factor(y_actual)
confusion_mat = as.matrix(table(actual, predicted ))
print(confusion_mat)
round(importance(model.y), 2)
return(confusion_mat)
print(confusion_mat)
