use_signif=FALSE
NORMALIZED=TRUE;
source(paste0(script_dir, '/config.R'))
source(paste0(script_dir, '/mofa_config.R'))
TOP_GN
metadata_output<-paste0(output_files, 'combined.csv')
combined<-read.csv2(metadata_output)
combined_bl<-combined
scale_views=TRUE
p_params<- paste0(VISIT_S, '_',TISSUE, '_', TOP_PN, '_', substr(NORMALIZED,1,1), '_', sel_coh_s,'vsn_', substr(run_vsn,1,1), 'NA_', NA_PERCENT)
mofa_params<-paste0(N_FACTORS,'_sig_',  use_signif )
highly_variable_proteins_outfile = paste0(output_files, p_params , '_highly_variable_proteins_mofa.csv')
highly_variable_genes_outfile<-paste0(output_files, param_str_g,'_highly_variable_genes_mofa.csv')
highly_variable_mirnas_outfile<-paste0(output_files, param_str_m,'_highly_variable_genes_mofa.csv')
if (use_signif){
highly_variable_genes_outfile<-paste0(output_files, param_str_g,'_highly_variable_genes_mofa_signif.csv')
highly_variable_mirnas_outfile<-paste0(output_files, param_str_m,'_highly_variable_genes_mofa_signif.csv')
}
highly_variable_mirnas_outfile
highly_variable_genes_outfile
highly_variable_proteins_outfile
out_params<- paste0( 'p_', p_params, 'g_', g_params, 'm_', m_params, mofa_params, '_coh_', sel_coh_s,'_', VISIT_S, '_', scale_views[1])
outdir = paste0(outdir_orig,out_params , '/');outdir
dir.create(outdir, showWarnings = FALSE)
fname<-paste0(output_files, 'proteomics_',TISSUE, '.csv')
fname
in_file<-highly_variable_proteins_outfile
highly_variable_proteins_mofa<-as.matrix(fread(in_file,header=TRUE), rownames=1)
colname = c(colnames(RNA), colnames(miRNA))
primary=colname
colname
sample_map=DataFrame(assay=assay_full, primary=primary, colname=colname)
common_samples_in_assays=unique(colname)
common_samples_in_assays
metadata_filt$primary<-metadata_filt$PATNO_EVENT_ID
metadata_filt<-combined_bl[match(common_samples_in_assays, combined_bl$PATNO_EVENT_ID),]
rownames(metadata_filt)=metadata_filt$PATNO_EVENT_ID
mofa_multi<-MultiAssayExperiment(experiments=data_full,
colData = metadata_filt,
sampleMap=sample_map)
head(assays(mofa_multi)$miRNA)
mofa_multi_complete<-mofa_multi[,complete.cases(mofa_multi)]
mofa_multi_complete
complete.cases(metadata_filt$EVENT_ID)
library('UpSetR')
upsetSamples(mofa_multi)
mofa_multi_V04=mofa_multi[,mofa_multi$EVENT_ID %in% VISIT]
mofa_multi_V04
colData(mofa_multi_V04)
#N_FACTORS=8
### separate visits
outdir
MOFAobject <- create_mofa(mofa_multi_complete)
if (length(VISIT)>1){
MOFAobject <- create_mofa(mofa_multi_complete, groups= mofa_multi_complete$EVENT_ID)
}
model_opts <- get_default_model_options(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
model_opts$num_factors <- N_FACTORS
data_opts
data_opts$scale_views=scale_views
MOFAobject <- prepare_mofa(MOFAobject,
model_options = model_opts,
data_options = data_opts
)
plot_data_overview(MOFAobject)
outdir
ggsave(paste0(outdir, 'data_overview.jpeg'))
#### TODO FIX THE DATAFRAME
#outdir = paste0(outdir_orig,out_params , '_', VISIT, '/');
outdir
dir.create(outdir, showWarnings = FALSE)
mofa_file<-paste0(outdir,'mofa_ppmi.hdf5')
if (file.exists(mofa_file)){
pre_trained<-load_model(paste0(outdir,'mofa_ppmi.hdf5'))
MOFAobject<-pre_trained
}else {
MOFAobject <- run_mofa(MOFAobject, outfile = paste0(outdir,'mofa_ppmi.hdf5'), use_basilisk = TRUE)
}
plot_variance_explained(MOFAobject, max_r2=20)
ggsave(paste0(outdir, 'variance_explained_total','.png'), width = 7, height=4, dpi=100)
samples_metadata(MOFAobject)$Outcome
library(caret)
library(caret)
#remove.packages('rlang')
install.packages('randomForest')
all_preds(T=0.1)
library(pROC)
suppressPackageStartupMessages(library(randomForest))
fetch_top_weights<-function(ws){
#ws=ws_all_miRNA
### apply to each factor
#ws=ws_all_miRNA[,1]
ws=ws[order(-ws)]
ws_top<-ws[abs(ws)>T]
ws_top
#return(ws_top)
return(names(ws_top))
}
### then do predictions
T=0.5;
all_preds<-function(T){
## WEIGHT BY VARIANCE CAPTURED, RANK IN FACTOR, WEIGHT ETC.
## here automatically obtain highly associated features
ws_all_miRNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$miRNA
ws_all_RNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$RNA
all_feats_miRNA<-unlist(apply(ws_all_miRNA,2,fetch_top_weights) )
all_feats_RNA<-unlist(apply(ws_all_RNA,2,fetch_top_weights) )
all_feats_miRNA
miRNA_data<-get_data(MOFAobject)$miRNA[[1]]
RNA_data<-get_data(MOFAobject)$RNA[[1]]
### FEATURE SELECTION
RNA_data_filt<-RNA_data[unique(all_feats_RNA),]
miRNA_data_filt<-miRNA_data[unique(all_feats_miRNA),]
dim(RNA_data_filt)
dim(miRNA_data_filt)
data_filt<-rbind(RNA_data_filt, miRNA_data_filt)
dim(data_filt)
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
colnames(df)<-gsub('-', '.',colnames(df) )
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
# Do predictions
MOFAobject@samples_metadata$y.pred <- stats::predict(model.y, df)
MOFAobject@samples_metadata$y.pred
# Assess performance
## diagnostic
# install.packages('caret')
predicted<-MOFAobject@samples_metadata$y.pred
actual <-as.factor(MOFAobject@samples_metadata[,y_predict])
confusion_mat = as.matrix(table(actual, predicted ))
predictions<-as.data.frame(cbind(c(actual), c(predicted)))
colnames(predictions)=c('observed', 'predicted')
conf<-confusionMatrix(confusion_mat)
print(confusion_mat)
round(importance(model.y), 2)
return(conf)
}
all_preds(T=0.1)
library(pROC)
library(pROC)
roc.mock <- roc(ifelse(predictions$observed==3, 3, 2), as.numeric(predictions$predicted))
install.packages("randomForest")
install.packages("randomForest")
script_dir<-dirname(rstudioapi::getSourceEditorContext()$path)
source(paste0(script_dir,'/setup_os.R'))
library(MOFA2)
library(data.table)
library(ggplot2)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(ggplot2)
library('MultiAssayExperiment')
outdir_orig=paste0(data_dir,'ppmi/plots/')
output_files<- paste0(data_dir,'ppmi/output/')
source(paste0(script_dir,'/../bladder_cancer/preprocessing.R'))
source(paste0(script_dir,'/config.R'))
source(paste0(script_dir,'/mofa_config.R'))
TOP_GN
TOP_PN=0.70
FULL_SET=TRUE
NA_PERCENT=0.8
VISIT_COMPARE='BL'
TOP_PN=0.90
N_FACTORS=10
VISIT=c('V08');
TISSUE='CSF';
run_vsn=TRUE
TISSUE='Plasma';
NORMALIZED=TRUE;
use_signif=FALSE
source(paste0(script_dir, '/config.R'))
source(paste0(script_dir, '/mofa_config.R'))
TOP_GN
metadata_output<-paste0(output_files, 'combined.csv')
combined<-read.csv2(metadata_output)
combined_bl<-combined
scale_views=TRUE
p_params<- paste0(VISIT_S, '_',TISSUE, '_', TOP_PN, '_', substr(NORMALIZED,1,1), '_', sel_coh_s,'vsn_', substr(run_vsn,1,1), 'NA_', NA_PERCENT)
mofa_params<-paste0(N_FACTORS,'_sig_',  use_signif )
highly_variable_proteins_outfile = paste0(output_files, p_params , '_highly_variable_proteins_mofa.csv')
highly_variable_genes_outfile<-paste0(output_files, param_str_g,'_highly_variable_genes_mofa.csv')
highly_variable_mirnas_outfile<-paste0(output_files, param_str_m,'_highly_variable_genes_mofa.csv')
if (use_signif){
highly_variable_genes_outfile<-paste0(output_files, param_str_g,'_highly_variable_genes_mofa_signif.csv')
highly_variable_mirnas_outfile<-paste0(output_files, param_str_m,'_highly_variable_genes_mofa_signif.csv')
}
highly_variable_mirnas_outfile
highly_variable_genes_outfile
highly_variable_proteins_outfile
out_params<- paste0( 'p_', p_params, 'g_', g_params, 'm_', m_params, mofa_params, '_coh_', sel_coh_s,'_', VISIT_S, '_', scale_views[1])
outdir = paste0(outdir_orig,out_params , '/');outdir
dir.create(outdir, showWarnings = FALSE)
fname<-paste0(output_files, 'proteomics_',TISSUE, '.csv')
fname
in_file<-highly_variable_proteins_outfile
highly_variable_proteins_mofa<-as.matrix(fread(in_file,header=TRUE), rownames=1)
common_samples_in_assays=unique(colname)
common_samples_in_assays
metadata_filt$primary<-metadata_filt$PATNO_EVENT_ID
metadata_filt<-combined_bl[match(common_samples_in_assays, combined_bl$PATNO_EVENT_ID),]
rownames(metadata_filt)=metadata_filt$PATNO_EVENT_ID
mofa_multi<-MultiAssayExperiment(experiments=data_full,
colData = metadata_filt,
sampleMap=sample_map)
head(assays(mofa_multi)$miRNA)
mofa_multi_complete<-mofa_multi[,complete.cases(mofa_multi)]
mofa_multi_complete
complete.cases(metadata_filt$EVENT_ID)
library('UpSetR')
upsetSamples(mofa_multi)
mofa_multi_V04=mofa_multi[,mofa_multi$EVENT_ID %in% VISIT]
mofa_multi_V04
colData(mofa_multi_V04)
#N_FACTORS=8
### separate visits
outdir
MOFAobject <- create_mofa(mofa_multi_complete)
if (length(VISIT)>1){
MOFAobject <- create_mofa(mofa_multi_complete, groups= mofa_multi_complete$EVENT_ID)
}
model_opts <- get_default_model_options(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
model_opts$num_factors <- N_FACTORS
data_opts
data_opts$scale_views=scale_views
MOFAobject <- prepare_mofa(MOFAobject,
model_options = model_opts,
data_options = data_opts
)
plot_data_overview(MOFAobject)
outdir
ggsave(paste0(outdir, 'data_overview.jpeg'))
#### TODO FIX THE DATAFRAME
#outdir = paste0(outdir_orig,out_params , '_', VISIT, '/');
outdir
dir.create(outdir, showWarnings = FALSE)
mofa_file<-paste0(outdir,'mofa_ppmi.hdf5')
if (file.exists(mofa_file)){
pre_trained<-load_model(paste0(outdir,'mofa_ppmi.hdf5'))
MOFAobject<-pre_trained
}else {
MOFAobject <- run_mofa(MOFAobject, outfile = paste0(outdir,'mofa_ppmi.hdf5'), use_basilisk = TRUE)
}
plot_variance_explained(MOFAobject, max_r2=20)
ggsave(paste0(outdir, 'variance_explained_total','.png'), width = 7, height=4, dpi=100)
samples_metadata(MOFAobject)$Outcome
library(caret)
model <- train(x = d[,c(1,3)], y = d[,5], method = 'lda', metric = 'ROC',
trControl=trainControl(method = 'repeatedcv', number = 10,
repeats = 10, savePredictions = T,
classProbs = T, summary = twoClassSummary))
t
t
t
library(caret)
library(caret)
suppressPackageStartupMessages(library(randomForest))
fetch_top_weights<-function(ws){
#ws=ws_all_miRNA
### apply to each factor
#ws=ws_all_miRNA[,1]
ws=ws[order(-ws)]
ws_top<-ws[abs(ws)>T]
ws_top
#return(ws_top)
return(names(ws_top))
}
### then do predictions
T=0.5;
all_preds<-function(T){
## WEIGHT BY VARIANCE CAPTURED, RANK IN FACTOR, WEIGHT ETC.
## here automatically obtain highly associated features
ws_all_miRNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$miRNA
ws_all_RNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$RNA
all_feats_miRNA<-unlist(apply(ws_all_miRNA,2,fetch_top_weights) )
all_feats_RNA<-unlist(apply(ws_all_RNA,2,fetch_top_weights) )
all_feats_miRNA
miRNA_data<-get_data(MOFAobject)$miRNA[[1]]
RNA_data<-get_data(MOFAobject)$RNA[[1]]
### FEATURE SELECTION
RNA_data_filt<-RNA_data[unique(all_feats_RNA),]
miRNA_data_filt<-miRNA_data[unique(all_feats_miRNA),]
dim(RNA_data_filt)
dim(miRNA_data_filt)
data_filt<-rbind(RNA_data_filt, miRNA_data_filt)
dim(data_filt)
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
colnames(df)<-gsub('-', '.',colnames(df) )
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
# Do predictions
MOFAobject@samples_metadata$y.pred <- stats::predict(model.y, df)
MOFAobject@samples_metadata$y.pred
# Assess performance
## diagnostic
# install.packages('caret')
predicted<-MOFAobject@samples_metadata$y.pred
actual <-as.factor(MOFAobject@samples_metadata[,y_predict])
confusion_mat = as.matrix(table(actual, predicted ))
predictions<-as.data.frame(cbind(c(actual), c(predicted)))
colnames(predictions)=c('observed', 'predicted')
conf<-confusionMatrix(confusion_mat)
print(confusion_mat)
round(importance(model.y), 2)
return(conf)
}
all_preds(T=0.1)
library(caret)
#remove.packages('rlang')
install.packages('vctrs')
install.packages("vctrs")
#remove.packages('rlang')
#install.packages('vctrs')
library('vctrs')
suppressPackageStartupMessages(library(randomForest))
fetch_top_weights<-function(ws){
#ws=ws_all_miRNA
### apply to each factor
#ws=ws_all_miRNA[,1]
ws=ws[order(-ws)]
ws_top<-ws[abs(ws)>T]
ws_top
#return(ws_top)
return(names(ws_top))
}
### then do predictions
T=0.5;
all_preds<-function(T){
## WEIGHT BY VARIANCE CAPTURED, RANK IN FACTOR, WEIGHT ETC.
## here automatically obtain highly associated features
ws_all_miRNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$miRNA
ws_all_RNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$RNA
all_feats_miRNA<-unlist(apply(ws_all_miRNA,2,fetch_top_weights) )
all_feats_RNA<-unlist(apply(ws_all_RNA,2,fetch_top_weights) )
all_feats_miRNA
miRNA_data<-get_data(MOFAobject)$miRNA[[1]]
RNA_data<-get_data(MOFAobject)$RNA[[1]]
### FEATURE SELECTION
RNA_data_filt<-RNA_data[unique(all_feats_RNA),]
miRNA_data_filt<-miRNA_data[unique(all_feats_miRNA),]
dim(RNA_data_filt)
dim(miRNA_data_filt)
data_filt<-rbind(RNA_data_filt, miRNA_data_filt)
dim(data_filt)
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
colnames(df)<-gsub('-', '.',colnames(df) )
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
# Do predictions
MOFAobject@samples_metadata$y.pred <- stats::predict(model.y, df)
MOFAobject@samples_metadata$y.pred
# Assess performance
## diagnostic
# install.packages('caret')
predicted<-MOFAobject@samples_metadata$y.pred
actual <-as.factor(MOFAobject@samples_metadata[,y_predict])
confusion_mat = as.matrix(table(actual, predicted ))
predictions<-as.data.frame(cbind(c(actual), c(predicted)))
colnames(predictions)=c('observed', 'predicted')
conf<-confusionMatrix(confusion_mat)
print(confusion_mat)
round(importance(model.y), 2)
return(conf)
}
all_preds(T=0.1)
library(caret)
all_preds<-function(T){
## WEIGHT BY VARIANCE CAPTURED, RANK IN FACTOR, WEIGHT ETC.
## here automatically obtain highly associated features
ws_all_miRNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$miRNA
ws_all_RNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$RNA
all_feats_miRNA<-unlist(apply(ws_all_miRNA,2,fetch_top_weights) )
all_feats_RNA<-unlist(apply(ws_all_RNA,2,fetch_top_weights) )
all_feats_miRNA
miRNA_data<-get_data(MOFAobject)$miRNA[[1]]
RNA_data<-get_data(MOFAobject)$RNA[[1]]
### FEATURE SELECTION
RNA_data_filt<-RNA_data[unique(all_feats_RNA),]
miRNA_data_filt<-miRNA_data[unique(all_feats_miRNA),]
dim(RNA_data_filt)
dim(miRNA_data_filt)
data_filt<-rbind(RNA_data_filt, miRNA_data_filt)
dim(data_filt)
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
colnames(df)<-gsub('-', '.',colnames(df) )
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
# Do predictions
MOFAobject@samples_metadata$y.pred <- stats::predict(model.y, df)
MOFAobject@samples_metadata$y.pred
# Assess performance
## diagnostic
# install.packages('caret')
predicted<-MOFAobject@samples_metadata$y.pred
actual <-as.factor(MOFAobject@samples_metadata[,y_predict])
confusion_mat = as.matrix(table(actual, predicted ))
predictions<-as.data.frame(cbind(c(actual), c(predicted)))
colnames(predictions)=c('observed', 'predicted')
#conf<-confusionMatrix(confusion_mat)
print(confusion_mat)
round(importance(model.y), 2)
return(conf)
}
all_preds(T=0.1)
### FEATURE SELECTION
sel_feats<-unique(all_feats_RNA)
select_feats=outdir_s
outdir_s
paste0(outdir_s, 'significant.csv')
paste0(outdir_s, '/significant.csv')
sig<-read.csv(paste0(outdir_s, '/significant.csv'))
sig<-read.csv(paste0(outdir_s, '/significant0.005_0.25.csv'))
names(sig)
rownames(sig)
sig
sig$X
SIG_GENES<-sig$X
## WEIGHT BY VARIANCE CAPTURED, RANK IN FACTOR, WEIGHT ETC.
## here automatically obtain highly associated features
ws_all_miRNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$miRNA
ws_all_RNA<-get_weights(MOFAobject, factors=c(2,3,4,6))$RNA
all_feats_miRNA<-unlist(apply(ws_all_miRNA,2,fetch_top_weights) )
all_feats_RNA<-unlist(apply(ws_all_RNA,2,fetch_top_weights) )
all_feats_miRNA
miRNA_data<-get_data(MOFAobject)$miRNA[[1]]
RNA_data<-get_data(MOFAobject)$RNA[[1]]
### FEATURE SELECTION
sel_feats<-unique(all_feats_RNA)
select_features<-function(select_feats){
RNA_data_filt<-RNA_data[SIG_GENES,]
}
RNA_data_filt<-RNA_data[SIG_GENES,]
# data_filt<-rbind(RNA_data_filt, miRNA_data_filt)
data_filt<-RNA_data_filt
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
colnames(df)<-gsub('-', '.',colnames(df) )
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
# Do predictions
MOFAobject@samples_metadata$y.pred <- stats::predict(model.y, df)
MOFAobject@samples_metadata$y.pred
predicted<-MOFAobject@samples_metadata$y.pred
actual <-as.factor(MOFAobject@samples_metadata[,y_predict])
confusion_mat = as.matrix(table(actual, predicted ))
predictions<-as.data.frame(cbind(c(actual), c(predicted)))
colnames(predictions)=c('observed', 'predicted')
print(confusion_mat)
data_filt
# Prepare data
# Predict EORTC.risk with factor 1,2 only!
df <- as.data.frame(t(data_filt))
# Train the model for IGHV
y_predict='CONCOHORT_DEFINITION'
y_predict='CONCOHORT'
colnames(df)<-gsub('-', '.',colnames(df) )
df$y <- as.factor(MOFAobject@samples_metadata[,y_predict])
#run_rf( df, ){
model.y <- randomForest(y ~ .,data= df, ntree=10)
df$y <- NULL # important
# Do predictions
MOFAobject@samples_metadata$y.pred <- stats::predict(model.y, df)
MOFAobject@samples_metadata$y.pred
predicted<-MOFAobject@samples_metadata$y.pred
actual <-as.factor(MOFAobject@samples_metadata[,y_predict])
confusion_mat = as.matrix(table(actual, predicted ))
predictions<-as.data.frame(cbind(c(actual), c(predicted)))
colnames(predictions)=c('observed', 'predicted')
print(confusion_mat)
round(importance(model.y), 2)
print(confusion_mat)
accuracy(confusion_mat)
library(ConfusionTableR)
install.packages('ConfusionTableR')
library(ConfusionTableR)
mc_df <- ConfusionTableR::multi_class_cm(predictions$actual,
predictions$predicted,
mode="everything")
library(ConfusionTableR)
