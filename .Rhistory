df_by_group<-new %>%
group_by_at(x_group) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations() %>%
get_frequencies()
)  %>%
map_df(I, .id=x_group)
# Attach the key names back to the dataframe
df_by_group<-as.data.frame(as.matrix(df_by_group))
df_by_group[,x_group]<-as.numeric(df_by_group[,x_group])
key_names<-c(keys[df_by_group[,x_group]])
df_by_group<-cbind(key_names,df_by_group)
df_by_group$Freq<-as.numeric(df_by_group$Freq)
df_to_plot<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= 5) %>%
group_by_at(x_group)  %>%
filter( sum(Freq) >= 2)
#df_to_plot<-df_by_group
df_to_plot<-df_to_plot[!is.na(df_to_plot$key_names),]
show_p<-plotbyObjective(df_to_plot )
show_p
plotbyObjective<-function(df){
g<-ggplot(df, aes(x=reorder(key_names, -Freq, sum), y=Freq, fill=Var1))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL)+
theme(axis.text.x = element_text(size=rel(1.3),angle = 25, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,2,1.7),"cm"))
ggsave(paste0('plots/byGroup', as.character(x_group), '.png'), width = 8, height=6)
return(g)
}
show_p<-plotbyObjective(df_to_plot )
show_p
#comb_freq<- comb_frequencies_by_group %>% filter(same_sample ==3)
edge_list<-data.frame(do.call(rbind, str_split(comb_freq$Var1, ' - ')))
edge_list$weight<-comb_freq$Freq
edge_list<-edge_list[order(edge_list$weight, decreasing = TRUE),]
comb_frequencies_by_group
df_by_group
comb_frequencies_by_group<-df_by_group
comb_freq<- comb_frequencies_by_group %>% filter(same_sample ==3)
comb_freq<- comb_frequencies_by_group #%>% filter(same_sample ==3)
edge_list<-data.frame(do.call(rbind, str_split(comb_freq$Var1, ' - ')))
edge_list$weight<-comb_freq$Freq
edge_list<-edge_list[order(edge_list$weight, decreasing = TRUE),]
edge_list
library(igraph)
#### Add the frequency of single omics to the network vertices
single_omics_frequencies[which(single_omics_frequencies$Var1 )]
df<-single_omics_frequencies
net_att<-df[match(V(net)$name, df$Var1),]
#### Add the frequency of single omics to the network vertices
df<-single_omics_frequencies
net_att<-df[match(V(net)$name, df$Var1),]
net_att<-df[match(V(net)$name, df$Var1),]
net<-graph_from_data_frame(edge_list, directed = FALSE, vertices =NULL)
net_att<-df[match(V(net)$name, df$Var1),]
save(paste0('plots/network', as.character(colname), '.png'), width = 8, height=6)
vertex_attr(net, 'freq', index=V(net))<-single_omics_frequencies$Freq
p<-plot.igraph(net, edge.width=edge_list$weight, vertex.size=net_att$Freq)
edge_list
comb_freq$Var1
comb_frequencies_by_group
colname<-'Data'
library('dplyr')
library('purrr')
level1<-c('Transcriptomics', 'Genomics','Epigenomics', 'Proteomics', 'Metabolomics', 'Lipidomics', 'Metagenomics', 'miRNAs')
# Process; if methylation or histone; add epigenomics!
preprocessing<-function(df,colname){
#' Split the column
#' Return the split variables to get the frequencies
splitted<-str_split(df[[colname]], ',|\r|\n') # split by space, comma, newline
splitted<-lapply(splitted,trimws)           # remove whitespace
splitted<-splitted[!is.na(splitted)]      # remove nas
return(splitted)
}
comb_frequencies_by_group<-get_combination_frequencies_by_group(stats, 'Data')
get_frequencies<-function(x){
#' Get the frequency of each occurrence
#'
#'
x<-unlist(x) # collapse accross studies
x<-x[x!='']
x<-table(tolower(unlist(x)))
x<-data.frame(x)
#return(omics_data_frequencies)
}
df<-new
Var1<-'objective'
group_objectives<-function(df, Var1){
#'Group objective code column
df[Var1]<-sapply(df[Var1],
function(x)
gsub('.*diagnosis.*|*prognosis*', 'Diagnosis/Prognosis', tolower(x)))
return(df)
}
#TODO: make a function to check if there is methylomics
group_omics<-function(df, Var1){
#'Group objective code column
df[Var1]<-sapply(df[Var1],
function(x)
gsub('*methyl*', 'Epigenomics', tolower(x)))
return(df)
}
library('readxl')
library('stringr')
library(ggplot2)
library(data.table)
stats<-read_excel('C:/Users/athienitie/Google Drive/PHD 2020/Literature/Data Integration/Copy of Multi-omics_not cancer_updated at home  - November 2, 6_24 Pm.xlsx' )
stats<-read_excel('H:/My Drive/PHD 2020/Literature/Data Integration/Multi-omics_not cancer_merge.xlsx' )
stats<-read_excel('/Users/efiathieniti/Documents/Google Drive/PHD 2020/Literature/Data Integration/Multi-omics_merge.xlsx' )
stats$Cancer<-c(rep('no',289), rep('yes',(nrow(stats)-289)))
### Remove reviews, remove rejected articles
## GLOBAL FILTER
stats <- stats %>%
#filter(Type!= 'Review')%>%
filter(is.na(`Rejection /Critic`)) %>%
filter(tolower(same_sample)!='no')
stats$same_sample<-as.factor(tolower(stats$same_sample))
stats$Cancer<-as.factor(tolower(stats$Cancer))
get_frequencies_by_group<-function(stats,colname){
df_by_group<- stats %>%
group_by(same_sample) %>%
group_map(~ preprocessing(.x, colname) %>%
get_frequencies()
)  %>%
map_df(I, .id='same_sample')
return(df_by_group)
}
stats$same_sample<-as.factor(tolower(stats$same_sample))
colname<-'Data'
#### Also filter by omics
frequencies_by_group<-get_frequencies_by_group(stats, colname)
freq_to_plot<-frequencies_by_group %>% filter(Var1 %in% tolower(level1))
single_omics_frequencies=freq_to_plot
library(grid)
plotByData<-function(df_by_group){
ggplot(df_by_group,
aes(x=reorder(Var1, -Freq, sum), y=Freq))+
aes_string(fill=y_group)+
geom_bar(stat='identity',position='stack')+
labs(x=NULL, title=paste0('Combinations with > ',freq_cutoff, ' occurences'))+
theme(axis.text.x = element_text(size=rel(1.3),angle = 35, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,1.7,2.5),"cm"))
ggsave(paste0('plots/byCombinations', as.character(colname), '.png'), width = 8, height=6)
}
plotByData(freq_to_plot)
ggplot(freq_to_plot, aes(x=reorder(Var1, -Freq, sum), y=Freq, fill=same_sample))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL)+
theme(axis.text.x = element_text(size=rel(1.3),angle = 25, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,2,1.5),"cm"))
ggsave(paste0('plots/SingleOmicsby', as.character(colname), '.png'), width = 8, height = 5)
colname<-'Data'
omics_data<-df_by_group[[1]]
get_combs<- function(x){
x<-unlist(x)
x<-x[tolower(x) %in% tolower(level1)]
if (length(x)>1){
x<-x[order(x)]
combn(x,2, FUN=paste, collapse=' - ')}
}
preprocessing_combinations<-function(x){
#' Create combinations of omics datasets
x<-x[x!='']
#
x<-x[!is.na(x)]
#' Create pairs of omics
#' #
#'
combinations<-lapply(x,get_combs)
return(combinations)
}
total<-NROW(stats[!is.na(stats$Data),]$PMID)
y_group='same_sample'
y_group='Cancer'
df_by_group <- stats %>%
#group_by(same_sample) %>%
group_by_at(y_group) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations %>%
get_frequencies()
)  %>%
map_df(I, .id=y_group)
freq_cutoff<-7
df_by_group<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= freq_cutoff)
plotByData(df_by_group)
comb_frequencies_by_group<-df_by_group
library(tidyverse)
########
###
#' Expand the objective-code
#' And get frequencies by objective group
#'
colnames(stats)[which(colnames(stats)=='Objective-Code')]<-'objective'
colnames(stats)[which(colnames(stats)=='Integration method-Category')]<-'method'
new<-stats %>%
mutate(method=strsplit(method, ',|\r|\n' ))%>%
unnest(method)
#x_group<-'objective'
x_group<-'method'
colname='Data'
new[x_group] <-apply(new[x_group], 1, function(x) trimws(tolower(x)))
keys<-pull(new %>%
group_by_at(x_group) %>%
group_keys())
#' TODO: check the rownames given by get frequencies..
#' TODO: use dplyr instead
#'
#'
df_by_group<-new %>%
group_by_at(x_group)
df_by_group<-new %>%
group_by_at(x_group) %>%
group_map(~ preprocessing(.x, colname)  %>%
preprocessing_combinations() %>%
get_frequencies()
)  %>%
map_df(I, .id=x_group)
# Attach the key names back to the dataframe
df_by_group<-as.data.frame(as.matrix(df_by_group))
df_by_group[,x_group]<-as.numeric(df_by_group[,x_group])
key_names<-c(keys[df_by_group[,x_group]])
df_by_group<-cbind(key_names,df_by_group)
df_by_group$Freq<-as.numeric(df_by_group$Freq)
df_to_plot<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= 5) %>%
group_by_at(x_group)  %>%
filter( sum(Freq) >= 2)
#df_to_plot<-df_by_group
df_to_plot<-df_to_plot[!is.na(df_to_plot$key_names),]
plotbyObjective<-function(df){
g<-ggplot(df, aes(x=reorder(key_names, -Freq, sum), y=Freq, fill=Var1))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL)+
theme(axis.text.x = element_text(size=rel(1.3),angle = 25, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,2,1.7),"cm"))
ggsave(paste0('plots/byGroup', as.character(x_group), '.png'), width = 8, height=6)
return(g)
}
show_p<-plotbyObjective(df_to_plot )
show_p
comb_freq<- comb_frequencies_by_group #%>% filter(same_sample ==3)
edge_list<-data.frame(do.call(rbind, str_split(comb_freq$Var1, ' - ')))
edge_list$weight<-comb_freq$Freq
edge_list<-edge_list[order(edge_list$weight, decreasing = TRUE),]
edge_list
library(igraph)
#### Add the frequency of single omics to the network vertices
df<-single_omics_frequencies
net<-graph_from_data_frame(edge_list, directed = FALSE, vertices =NULL)
net_att<-df[match(V(net)$name, df$Var1),]
vertex_attr(net, 'freq', index=V(net))<-single_omics_frequencies$Freq
p<-plot.igraph(net, edge.width=edge_list$weight, vertex.size=net_att$Freq)
save(p,paste0('plots/network', as.character(colname), '.png'))
comb_frequencies_by_group
comb_freq<- comb_frequencies_by_group %>% filter(Cancer ==2)
edge_list<-data.frame(do.call(rbind, str_split(comb_freq$Var1, ' - ')))
edge_list$weight<-comb_freq$Freq
edge_list<-edge_list[order(edge_list$weight, decreasing = TRUE),]
edge_list
library(igraph)
#### Add the frequency of single omics to the network vertices
df<-single_omics_frequencies
net<-graph_from_data_frame(edge_list, directed = FALSE, vertices =NULL)
net_att<-df[match(V(net)$name, df$Var1),]
vertex_attr(net, 'freq', index=V(net))<-single_omics_frequencies$Freq
p<-plot.igraph(net, edge.width=edge_list$weight, vertex.size=net_att$Freq)
save(p,paste0('plots/network', as.character(colname), '.png'))
comb_freq<- comb_frequencies_by_group %>% filter(Cancer ==1)
edge_list<-data.frame(do.call(rbind, str_split(comb_freq$Var1, ' - ')))
edge_list$weight<-comb_freq$Freq
edge_list<-edge_list[order(edge_list$weight, decreasing = TRUE),]
edge_list
library(igraph)
#### Add the frequency of single omics to the network vertices
df<-single_omics_frequencies
net<-graph_from_data_frame(edge_list, directed = FALSE, vertices =NULL)
net_att<-df[match(V(net)$name, df$Var1),]
vertex_attr(net, 'freq', index=V(net))<-single_omics_frequencies$Freq
p<-plot.igraph(net, edge.width=edge_list$weight, vertex.size=net_att$Freq)
save(p,paste0('plots/network', as.character(colname), '.png'))
g <- set.vertex.attribute(g,'id',1,'first_id')
colname<-'Data'
library('dplyr')
library('purrr')
level1<-c('Transcriptomics', 'Genomics','Epigenomics', 'Proteomics', 'Metabolomics', 'Metagenomics', 'miRNAs')
# Process; if methylation or histone; add epigenomics!
preprocessing<-function(df,colname){
#' Split the column
#' Return the split variables to get the frequencies
splitted<-str_split(df[[colname]], ',|\r|\n') # split by space, comma, newline
splitted<-lapply(splitted,trimws)           # remove whitespace
splitted<-splitted[!is.na(splitted)]      # remove nas
return(splitted)
}
comb_frequencies_by_group<-get_combination_frequencies_by_group(stats, 'Data')
get_frequencies<-function(x){
#' Get the frequency of each occurrence
#'
#'
x<-unlist(x) # collapse accross studies
x<-x[x!='']
x<-table(tolower(unlist(x)))
x<-data.frame(x)
#return(omics_data_frequencies)
}
group_objectives_method<-function(df, Var1){
#'Group objective code column
#'These groups are for objective - method
df[Var1]<-sapply(df[Var1],
function(x)
mgsub::mgsub(tolower(x),c('.*diagnosis.*|*prognosis*','.*understand.*'),
c('Diagnosis/Prognosis', 'understand molecular mechanisms')))
return(df)
}
df<-new
Var1<-'method'
library(gsubfn)
group_methods<-function(df, Var1){
df[Var1]<-sapply(df[Var1],function(x){
mgsub::mgsub(tolower(x),
c(".*learning.*|.*decision.*|.*neural.*",  '.*pca.*', '.*regression.*', '.*factor.*',
'.*multivar.*', '.*snf.*', '.*gsea.*', '.*cca.*',
'.*kernel.*', '.*autoencoder.*'),
c( "machine/deep learning", 'clustering',
'regression', 'factor Analysis', 'multivariate analysis',
'network', 'enrichment', 'canonical correlation analysis',
'kernel learning', 'autoencoder + deep learning'
))}
)
#new_col=as.factor(new_col)
return(df)
}
library(magrittr)
library('readxl')
library('stringr')
library(ggplot2)
library(data.table)
stats<-read_excel('C:/Users/athienitie/Google Drive/PHD 2020/Literature/Data Integration/Copy of Multi-omics_not cancer_updated at home  - November 2, 6_24 Pm.xlsx' )
stats<-read_excel('G:/My Drive/PHD 2020/Literature/Data Integration/Multi-omics_not cancer_merge.xlsx' )
stats<-read_excel('/Users/efiathieniti/Documents/Google Drive/PHD 2020/Literature/Data Integration/Multi-omics_merge.xlsx' )
stats<-stats[1:289,]
stats$PMID<-as.numeric(stats$PMID)
### Remove reviews, remove rejected articles
## GLOBAL FILTER
stats <- stats %>%
#filter(Type!= 'Review')%>%
filter(is.na(`Rejection /Critic`))
which(stats$PMID==31856727)
library(grid)
stats<-read_excel('/Users/efiathieniti/Documents/Google Drive/PHD 2020/Literature/Data Integration/Multi-omics_merge.xlsx' )
stats<-stats[1:289,]
stats$PMID<-as.numeric(stats$PMID)
### Remove reviews, remove rejected articles
## GLOBAL FILTER
stats <- stats %>%
#filter(Type!= 'Review')%>%
filter(is.na(`Rejection /Critic`))
which(stats$PMID==31856727)
library(grid)
library(tidyverse)
library(grid)
library(tidyverse)
########
###
#' Expand the objective-code
#' And get frequencies by objective group
#'
colnames(stats)[which(colnames(stats)=='Objective-Code')]<-'objective'
colnames(stats)[which(colnames(stats)=='Integration method-Category')]<-'method'
colnames(stats)[which(colnames(stats)=='Objective-Method')]<-'ObjeMeth'
new<-stats %>%
mutate(ObjeMeth=strsplit(ObjeMeth, ',|\r|\n' ))%>%
unnest(ObjeMeth)
new <-new %>% separate(ObjeMeth, c("objective","method"), sep = " - ")
#x_group<-'objective'
x_group<-'method'
colname='objective'
new[x_group] <-apply(new[x_group], 1, function(x) trimws(tolower(x)))
stats<-read_excel('C:/Users/athienitie/Google Drive/PHD 2020/Literature/Data Integration/Copy of Multi-omics_not cancer_updated at home  - November 2, 6_24 Pm.xlsx' )
stats<-read_excel('G:/My Drive/PHD 2020/Literature/Data Integration/Multi-omics_not cancer_merge.xlsx' )
stats<-read_excel('/Users/efiathieniti/Documents/Google Drive/PHD 2020/Literature/Data Integration/Multi-omics_merge.xlsx' )
#stats<-stats[1:289,]
stats$PMID<-as.numeric(stats$PMID)
stats$Cancer<-c(rep('no',289), rep('yes',(nrow(stats)-289)))
### Remove reviews, remove rejected articles
## GLOBAL FILTER
stats <- stats %>%
#filter(Type!= 'Review')%>%
filter(is.na(`Rejection /Critic`))
which(stats$PMID==31856727)
library(grid)
library(tidyverse)
library(grid)
library(tidyverse)
########
###
#' Expand the objective-code
#' And get frequencies by objective group
#'
colnames(stats)[which(colnames(stats)=='Objective-Code')]<-'objective'
colnames(stats)[which(colnames(stats)=='Integration method-Category')]<-'method'
colnames(stats)[which(colnames(stats)=='Objective-Method')]<-'ObjeMeth'
new<-stats %>%
mutate(ObjeMeth=strsplit(ObjeMeth, ',|\r|\n' ))%>%
unnest(ObjeMeth)
new <-new %>% separate(ObjeMeth, c("objective","method"), sep = " - ")
#x_group<-'objective'
x_group<-'method'
stats$Cancer<-c(rep('no',289), rep('yes',(nrow(stats)-289)))
### Remove reviews, remove rejected articles
## GLOBAL FILTER
stats <- stats %>%
#filter(Type!= 'Review')%>%
filter(is.na(`Rejection /Critic`))
which(stats$PMID==31856727)
library(grid)
library(tidyverse)
library(grid)
library(tidyverse)
########
###
#' Expand the objective-code
#' And get frequencies by objective group
#'
colnames(stats)[which(colnames(stats)=='Objective-Code')]<-'objective'
colnames(stats)[which(colnames(stats)=='Integration method-Category')]<-'method'
colnames(stats)[which(colnames(stats)=='Objective-Method')]<-'ObjeMeth'
new<-stats %>%
mutate(ObjeMeth=strsplit(ObjeMeth, ',|\r|\n' ))%>%
unnest(ObjeMeth)
new <-new %>% separate(ObjeMeth, c("objective","method"), sep = " - ")
#x_group<-'objective'
x_group<-'method'
colname='objective'
new[x_group] <-apply(new[x_group], 1, function(x) trimws(tolower(x)))
new[colname] <-apply(new[colname], 1, function(x) trimws(tolower(x)))
new[x_group]
new<-group_objectives_method(new, 'objective')
new<-group_methods(new, 'method')
keys<-pull(new %>%
group_by_at(x_group) %>%
group_keys())
#' TODO: check the rownames given by get frequencies..
#' TODO: use dplyr instead
#'
#'
df_by_group<-new %>%
group_by_at(x_group)
df_by_group<-new %>%
group_by_at(x_group) %>%
group_map(~ preprocessing(.x, colname) %>%
get_frequencies()
)  %>%
map_df(I, .id=x_group)
# Attach the key names back to the dataframe
df_by_group<-as.data.frame(as.matrix(df_by_group))
df_by_group[,x_group]<-as.numeric(df_by_group[,x_group])
key_names<-c(keys[df_by_group[,x_group]])
df_by_group<-cbind(key_names,df_by_group)
df_by_group$Freq<-as.numeric(df_by_group$Freq)
df_to_plot<-df_by_group %>%
group_by(Var1)  %>%
filter( sum(Freq) >= 1) %>%
group_by_at(x_group)  %>%
filter( sum(Freq) >= 1)
#df_to_plot<-df_by_group
df_to_plot<-df_to_plot[!is.na(df_to_plot$key_names),]
show_p<-plotbyObjective(df_to_plot )
show_p
plotbyObjective<-function(df){
g<-ggplot(df, aes(x=reorder(key_names, -Freq, sum), y=Freq, fill=Var1))+
geom_bar(stat='identity',position='stack')+
labs(x=NULL)+
theme(axis.text.x = element_text(size=rel(1.3),angle = 25, vjust = 0.5, hjust=1))+
theme(plot.margin=unit(c(1,1,2,1.7),"cm"))
ggsave(paste0('plots/byObjMethod', as.character(x_group), '.png'), width = 10, height=6)
return(g)
}
new_concise<-new_concise[!is.na(new_concise['Data']),]
new_concise<-new[c('Data', 'objective', 'method' )]
#install.packages('alluvial')
#install.packages('ggalluvial')
library('ggalluvial')
library('alluvial')
new_concise<-new[c('Data', 'objective', 'method', 'PMID' )]
new2<-new %>%
mutate(Data=strsplit(Data, ',|\r|\n' ) )%>%
unnest(Data)
new2$Data<-tolower(trimws(new2$Data))
new2<-new2 %>% filter(Data %in% tolower(level1))
levels(as.factor(new2$Data))
new2<-new2[!is.na(new2$method),]
new2<-new2[!is.na(new2$Data),]
new2<-new2[!is.na(new2$objective),]
counts<-new2 %>% count(Data, objective)
counts<-counts%>% filter(n>1)
df<-counts
ggplot(as.data.frame(df),
aes(y = n, axis1 = Data, axis2 = objective)) +
geom_alluvium(aes(fill = Data),
width = 0, knot.pos = 0, reverse = FALSE) +
guides(fill = FALSE) +
geom_stratum(width = 1/8, reverse = FALSE) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)),
reverse = FALSE) +
scale_x_continuous(breaks = 1:2, labels = c("Data", "objective")) +
ggtitle("Multi omics objectives")
